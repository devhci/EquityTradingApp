package com.sapient.equitytradingapp.pm.actions;

import java.util.List;

import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.ParentPackage;
import org.apache.struts2.convention.annotation.Result;
import org.springframework.beans.factory.annotation.Autowired;

import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;
import com.sapient.equitytradingapp.pm.pojo.Order;
import com.sapient.equitytradingapp.pm.pojo.Portfolio;
import com.sapient.equitytradingapp.pm.pojo.Security;
import com.sapient.equitytradingapp.pm.pojo.User;
import com.sapient.equitytradingapp.pm.service.CreateOrderPrefillFieldsService;
import com.sapient.equitytradingapp.pm.service.CreateOrderService;

/**
 * @Result(location = "Create", type = "tiles", name = "failure"),
 * @Result(location = "Create", type = "tiles", name = "input")
 * 
 * 
 */
@ParentPackage(value = "tiles-default")
@Action(value = "/create", results = {
		@Result(location = "pm/passToOrderBlotterAction.jsp", name = "success"),
		@Result(location = "create-view", type = "tiles", name = "input") })
public class CreateAction extends ActionSupport {

	private static final long serialVersionUID = 1L;

	private List<Security> security;
	private List<User> trader;
	private List<Portfolio> portfolio;

	@Autowired
	CreateOrderPrefillFieldsService createOrderPrefillLists;

	public List<Security> getSecurity() {
		return security;
	}

	public void setSecurity(List<Security> security) {
		this.security = security;
	}

	public List<User> getTrader() {
		return trader;
	}

	public void setTrader(List<User> trader) {
		this.trader = trader;
	}

	public List<Portfolio> getPortfolio() {
		return portfolio;
	}

	public void setPortfolio(List<Portfolio> portfolio) {
		this.portfolio = portfolio;
	}

	@Autowired
	Order order;

	@Autowired
	CreateOrderService orderService;

	// @VisitorFieldValidator
	public void setOrder(Order order) {
		this.order = order;
	}

	public Order getOrder() {
		return order;
	}

	public String execute() {

		System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
				+ order.getTrader() + " " + order.getPortfolioName());
		System.out.println("security start");
		// this.securityList=securityService.getSecurityList();
		System.out.println("security ends");
		System.out.println("tulika" + getOrder().getPortfolioName());
		System.out.println(order.getTotalQuantity());
		System.out.println("hello puneet in exec");

		orderService.addorderservice(order);
		System.out.println("abhishek" + getOrder().getOrderType() + "here");

		return "success";
	}

	@Override
	public void validate() {
		String manager = (String) ActionContext.getContext().getSession().get("sessionUsername");
		//searchSymbol = createOrderPrefillLists.returnSecurity();
		security=createOrderPrefillLists.returnSecurity();
		trader = createOrderPrefillLists.returnTrader();
		portfolio = createOrderPrefillLists.returnPortfolio(manager);
		System.out.println("tulika" + getOrder().getPortfolioName());

		if (getOrder().getOrderType().equalsIgnoreCase("Market Price")) {

			if (getOrder().getLimitPrice() != 0
					|| getOrder().getStopPrice() != 0) {
				System.out.println("abhishek" + getOrder().getLimitPrice()
						+ "here");
				addActionError("Limit Price and Stop Price must be null for Market Order");
			}
		}
		if (getOrder().getOrderType().equalsIgnoreCase("Profit Limit")) {
			if (getOrder().getLimitPrice() == 0
					|| getOrder().getStopPrice() != 0) {
				addActionError("In case of Order Type:-Profit Limit, Stop Price must be zero and Limit Price can not be zero");

			}

		}

		if (getOrder().getOrderType().equalsIgnoreCase("Stop Limit")) {

			if (getOrder().getLimitPrice() != 0
					|| getOrder().getStopPrice() == 0) {
				addActionError("In case of Order Type:-Stop Limit, Limit Price must be zero and Stop Price can not be zero");

			}

		}
		if (getOrder().getPortfolioName().equalsIgnoreCase("1")) {

			addActionError("please select portfolio");

		}

		if (getOrder().getTotalQuantity() <= 0) {

			addActionError("Quantity must be greater than zero");
		}
	}
}
