package com.sapient.equitytradingapp.et.jms;

import java.io.StringWriter;
import javax.jms.JMSException;
import javax.jms.ObjectMessage;
import javax.jms.Queue;
import javax.jms.QueueConnection;
import javax.jms.QueueConnectionFactory;
import javax.jms.QueueSender;
import javax.jms.QueueSession;
import javax.jms.Session;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.springframework.stereotype.Component;
import org.w3c.dom.Document;

@Component
public class ETSender {

	public void sendBlockOrder(String fileName) {
		String strFileContent = null;
		try {
			InitialContext context = new InitialContext();
			QueueConnectionFactory factory = (QueueConnectionFactory) context
					.lookup("QueueConnectionFactory");
			Queue queue = (Queue) context.lookup("dynamicQueues/testQ");

			QueueConnection con = factory.createQueueConnection();
			QueueSession session = con.createQueueSession(false,
					Session.AUTO_ACKNOWLEDGE);
			QueueSender sender = session.createSender(queue);

			try {
				DocumentBuilderFactory factory1 = DocumentBuilderFactory
						.newInstance();
				DocumentBuilder builder = factory1.newDocumentBuilder();
				Document doc = builder
						.parse(fileName);
				StringWriter stringWriter = new StringWriter();
				Transformer transformer = TransformerFactory.newInstance()
						.newTransformer();
				transformer.transform(new DOMSource(doc), new StreamResult(
						stringWriter));
				strFileContent = stringWriter.toString();
				System.out.println(strFileContent);

			} catch (Exception e) {
				e.getMessage();
			}

			for (int i = 0; i < 1; i++) {
				ObjectMessage objMessage = session.createObjectMessage();
				objMessage.setObject(strFileContent);
				sender.send(objMessage);
			}

		} catch (NamingException e) {
			e.printStackTrace();
		} catch (JMSException e) {
			e.printStackTrace();
		}
	}
}
