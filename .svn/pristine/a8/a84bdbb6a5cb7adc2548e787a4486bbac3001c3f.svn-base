package com.sapient.equitytradingapp.et.dao;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.persistence.TypedQuery;

import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.sapient.equitytradingapp.et.pojo.BlockOrder;
import com.sapient.equitytradingapp.pm.pojo.Order;

@Component
public class BlockOrderDAO {

	EntityManager entityManager;

	public EntityManager getEntityManager() {
		return entityManager;
	}

	@PersistenceContext
	public void setEntityManager(EntityManager entityManager) {
		this.entityManager = entityManager;
	}

	public List<BlockOrder> getDetails() {

		Query q = entityManager.createQuery("Select b from BlockOrder b");
		@SuppressWarnings("unchecked")
		List<BlockOrder> list = q.getResultList();
		return list;
	}

	public void save(BlockOrder blockOrder) {
		entityManager.persist(blockOrder);
	}
    @Transactional
	public void updateBlockOrder(BlockOrder blockOrder) {
		System.out.println("merging block order");
		entityManager.merge(blockOrder);
	}

	public void deleteDetails(BlockOrder blockOrder) {
		entityManager.remove(blockOrder);
	}

	public List<Order> getOrderDetails(long id) {

		TypedQuery<Order> query = entityManager.createQuery(
				"from Order o where blockOrderId=?", Order.class);
		query.setParameter(1, id);
		List<Order> list = query.getResultList();
		return list;
	}

	public void createNewBlockOrder(BlockOrder blockOrder, List<Order> orderList) {
		entityManager.persist(blockOrder);
		for (Order order : orderList) {
			order.setBlockOrderId(blockOrder.getBlockOrderId());
			entityManager.merge(order);
		}

	}

	public BlockOrder getBlockOrderById(Long blockOrderId) {
		
		return entityManager.find(BlockOrder.class, blockOrderId);
	}

	public List<BlockOrder> getCorrespondingBlocks(String side, String symbol,
			String trader) {
		/*
		 * TypedQuery<BlockOrder> query = entityManager.createQuery(
		 * "from BlockOrder bo where bo.side=? and bo.symbol=?" +
		 * " bo.trader=? and bo.status=?",BlockOrder.class);
		 */
		TypedQuery<BlockOrder> query = entityManager
				.createQuery(
						"from BlockOrder bo where bo.side = ? and bo.symbol=? and bo.trader=? and bo.status=? ",
						BlockOrder.class);
		query.setParameter(1, side);
		query.setParameter(2, symbol);
		query.setParameter(3, trader);
		query.setParameter(4, "new");
		return query.getResultList();
	}
	
	@Transactional
	public void cancelBlockOrder(List<BlockOrder> blockOrderList) {
		for(BlockOrder b:blockOrderList)
		{
			Query query=entityManager.createQuery("update Order set blockOrderId=null where blockOrderId=?");
			query.setParameter(1, b.getBlockOrderId());
			query.executeUpdate();		
			deleteDetails(b);
		}
		
	}
	@Transactional
	public void removeOrdersFromBlockOrder(List<Order> orderList) {
		for(Order o:orderList)
		{
			Query query=entityManager.createQuery("update Order set blockOrderId=null where blockOrderId=?");
			query.setParameter(1, o.getBlockOrderId());
			query.executeUpdate();			
		}
		
	}

}
