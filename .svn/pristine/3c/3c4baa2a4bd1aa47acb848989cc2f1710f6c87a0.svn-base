package com.sapient.equitytradingapp.et.jms;

import org.springframework.stereotype.Component;

import com.sapient.equitytradingapp.et.dao.ExecutionDAO;
import com.sapient.equitytradingapp.et.pojo.BlockOrder;
import com.sapient.equitytradingapp.et.pojo.BlockOrderListWrapper;
import com.sapient.equitytradingapp.et.pojo.Execution;



import java.io.IOException;
import java.io.Serializable;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageListener;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jms.core.JmsTemplate;
import org.springframework.stereotype.Component;


@Component
public class SellReceiver implements Serializable{// implements Runnable{

	/**
	 * 
	 */
	private static final long serialVersionUID = -1683255343089486604L;
	@Autowired
	private JmsTemplate jmsTemplate;
	@Autowired
	Execution execution;
	@Autowired
	ExecutionDAO executionDao;

	public JmsTemplate getJmsTemplate() {
		return jmsTemplate;
	}

	public void setJmsTemplate(JmsTemplate jmsTemplate) {
		this.jmsTemplate = jmsTemplate;
	}

	public void receiveMessage(Destination destination) throws JMSException, ClassNotFoundException, IOException, JAXBException {

		
		
		Message msg = jmsTemplate.receive(destination);
		HashMap<String, Object> properties = new HashMap<String, Object>();
		
		//Object obj = msg.getObjectProperty("ETMessage");
		//System.out.println(msg.toString());
		Enumeration enums = msg.getPropertyNames();
		while (enums.hasMoreElements()) {
			String propertyName = (String) enums.nextElement();
			properties.put(propertyName, msg.getObjectProperty(propertyName));
		}
		Object value = null;
		for (Map.Entry<String, Object> entry : properties.entrySet()) {
			String propertyName = entry.getKey();
			value = entry.getValue();
			System.out.println(propertyName + " " + value);
		}
		
		@SuppressWarnings("restriction")
		JAXBContext jaxbContext = JAXBContext
				.newInstance(BlockOrderListWrapper.class);
		StringReader stringReader = new StringReader(value.toString());
		@SuppressWarnings("restriction")
		Unmarshaller unmarshall = jaxbContext.createUnmarshaller();// unmarshaller does the task of changing the xml into a pojo.
		Transactions transaction = (Transactions) unmarshall.unmarshal(stringReader);
		execution.setBlockOrderId((long) transaction.getBlockorderid());
		execution.setExecutionQuantity(transaction.getTradequantity());
		execution.setStatus("new");
		execution.setExecutionPrice(transaction.getTradeprice());
		execution.setTradeExecutionId(transaction.getTradeexecutionid());
		execution.setTransactionTime(transaction.getTransactiontime());
		execution.setExecutionID(transaction.getTradeexecutionid());
		System.out.println(execution.toString());
		executionDao.createExecution(execution);
		
		//List<BlockOrder> blockOrderList = transaction.getBlockOrderList();
		//receiverDao.saveBlockOrder(blockOrderList);
		
		
	}

	


}

